{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","description","src","icon","country","temp","wind","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","setState","main","sys","weather","speed","iconUrl","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uPAQeA,EANF,kBACb,6BACI,oEACA,4LCIWC,EAPF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,eACtB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2HCcWC,EAjBC,SAAAN,GAAK,OACjB,yBAAKO,UAAU,aACdP,EAAMQ,MACP,oCACC,gFAAcR,EAAMS,YACjB,yBAAMC,IAAKV,EAAMW,QAEjB,oHAAoBX,EAAMQ,KAA1B,KAAkCR,EAAMY,SACxC,kGAAiBZ,EAAMa,KAAvB,cACA,8DAAWb,EAAMc,KAAjB,kBAIJ,uBAAGP,UAAU,SAASP,EAAMe,SCT1BC,EAAQ,mCAmFCC,E,4MAhFbC,MAAQ,CACNV,UAAMW,EACNN,UAAMM,EACNP,aAASO,EACTV,iBAAYU,EACZR,UAAKQ,EACLL,UAAMK,EACNJ,WAAOI,G,EAGXC,e,uCAAiB,WAAMC,GAAN,mBAAAC,EAAA,6DACfD,EAAEE,iBACEf,EAAOa,EAAEG,OAAOC,SAASjB,KAAKkB,MAFnB,kBAIMC,MAAM,qDAAD,OAAsDnB,EAAtD,kBAAoEQ,EAApE,0BAJX,cAITY,EAJS,gBAKIA,EAAQC,OALZ,OAKTC,EALS,OAOZtB,EACD,EAAKuB,SAAS,CACXvB,KAAKsB,EAAK1B,KACVS,KAAMiB,EAAKE,KAAKnB,KAChBD,QAAQkB,EAAKG,IAAIrB,QACjBH,YAAaqB,EAAKI,QAAQ,GAAGzB,YAC7BE,KAAMmB,EAAKI,QAAQ,GAAGvB,KACtBG,KAAMgB,EAAKhB,KAAKqB,MAChBpB,WAAOI,IAGV,EAAKY,SAAS,CACZvB,UAAKW,EACLN,UAAMM,EACNP,aAAQO,EACRV,iBAAYU,EACZR,UAAMQ,EACNL,UAAMK,EACNJ,MAAO,8EAzBI,kDA8BjB,EAAKgB,SAAS,CACVvB,UAAMW,EACNN,UAAMM,EACNP,aAASO,EACTV,iBAAYU,EACZR,UAAKQ,EACLL,UAAMK,EACNJ,MAAO,iIArCM,0D,6GA2Cb,IAAMqB,EAAU,mCAAqCC,KAAKnB,MAAMP,KAAO,OACvE,OACE,yBAAKJ,UAAU,WACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAY,0BAAyB,kBAAC,EAAD,OAC1C,yBAAKA,UAAU,0BACb,kBAAC,EAAD,CAAOL,cAAemC,KAAKjB,iBAC3B,kBAAC,EAAD,CACAP,KAAMwB,KAAKnB,MAAML,KACjBL,KAAM6B,KAAKnB,MAAMV,KACjBI,QAASyB,KAAKnB,MAAMN,QACpBH,YAAa4B,KAAKnB,MAAMT,YACxBE,KAAMyB,EACNtB,KAAMuB,KAAKnB,MAAMJ,KACjBC,MAAOsB,KAAKnB,MAAMH,iB,GAtEduB,IAAMC,W,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,a","file":"static/js/main.7c627ba1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => ( \r\n<div>\r\n    <h2>Погода</h2>\r\n    <p>Узнайте погоду в вашем городе!</p>\r\n</div>)\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n    <button>Получить погоду</button>\r\n</form>\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"infoWeath\">\r\n    {props.city &&    \r\n    <>\r\n     <p>Описание: {props.description}\r\n        <img  src={props.icon}></img>\r\n        </p>\r\n        <p>Местоположение: {props.city}, {props.country}</p>\r\n        <p>Температура: {props.temp}°С</p>\r\n        <p>Ветер: {props.wind}м/с</p>\r\n       \r\n       </>\r\n    }  \r\n    <p className=\"error\">{props.error }</p>    \r\n    </div>\r\n    );\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Info from \"./components/Info\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\n\r\nconst API_KEY=\"94737880558d647a06e637fcc697bf33\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    city: undefined,\r\n    temp: undefined,\r\n    country: undefined,\r\n    description:undefined,\r\n    icon:undefined,\r\n    wind: undefined,\r\n    error: undefined\r\n  }\r\n      \r\ngettingWeather = async(e) => {\r\n  e.preventDefault();\r\n  let city = e.target.elements.city.value;\r\n  try{\r\n  const api_url= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`)\r\n  const data = await api_url.json();\r\n  \r\n  if(city){\r\n    this.setState({\r\n       city:data.name,  \r\n       temp: data.main.temp,\r\n       country:data.sys.country,\r\n       description: data.weather[0].description,\r\n       icon: data.weather[0].icon,\r\n       wind: data.wind.speed,\r\n       error: undefined\r\n       });\r\n  }else {\r\n    this.setState({\r\n      city:undefined,  \r\n      temp: undefined,\r\n      country:undefined,\r\n      description:undefined,\r\n      icon: undefined,\r\n      wind: undefined,\r\n      error: \"Введите город\"\r\n      });\r\n  }\r\n}   \r\n  catch(error){\r\nthis.setState({\r\n    city: undefined,\r\n    temp: undefined,\r\n    country: undefined,\r\n    description:undefined,\r\n    icon:undefined,\r\n    wind: undefined,\r\n    error: \"Города нет в базе данных\"});\r\n}\r\n\r\n}\r\n\r\nrender(){\r\n    const iconUrl = \"http://openweathermap.org/img/w/\" + this.state.icon + \".png\";\r\n    return(\r\n      <div className=\"wrapper\">\r\n        <div className=\"main\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className = \"col-xs-6 col-sm-5 info\"><Info/></div>\r\n            <div className=\"col-xs-6 col-sm-7 form\">\r\n              <Form  weatherMethod={this.gettingWeather}/>\r\n              <Weather\r\n              temp={this.state.temp}\r\n              city={this.state.city}\r\n              country={this.state.country}\r\n              description={this.state.description}\r\n              icon={iconUrl}\r\n              wind={this.state.wind}\r\n              error={this.state.error}\r\n            />\r\n            </div>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}