{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","description","src","icon","country","temp","wind","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","setState","main","sys","weather","speed","cod","iconUrl","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uPAQeA,EANF,kBACb,6BACI,oEACA,4LCIWC,EAPF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,eACtB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2HCcWC,EAjBC,SAAAN,GAAK,OACjB,yBAAKO,UAAU,aACdP,EAAMQ,MACP,oCACC,gFAAcR,EAAMS,YACjB,yBAAMC,IAAKV,EAAMW,QAEjB,oHAAoBX,EAAMQ,KAA1B,KAAkCR,EAAMY,SACxC,kGAAiBZ,EAAMa,KAAvB,cACA,8DAAWb,EAAMc,KAAjB,kBAIJ,uBAAGP,UAAU,SAASP,EAAMe,SCT1BC,EAAQ,mCAoFCC,E,4MAjFbC,MAAQ,CACNV,UAAMW,EACNN,UAAMM,EACNP,aAASO,EACTV,iBAAYU,EACZR,UAAKQ,EACLL,UAAMK,EACNJ,WAAOI,G,EAGXC,e,uCAAiB,WAAMC,GAAN,mBAAAC,EAAA,6DAEfD,EAAEE,iBACEf,EAAOa,EAAEG,OAAOC,SAASjB,KAAKkB,MAHnB,kBAKMC,MAAM,qDAAD,OAAsDnB,EAAtD,kBAAoEQ,EAApE,0BALX,cAKTY,EALS,gBAMIA,EAAQC,OANZ,OAMTC,EANS,OAQZtB,EACD,EAAKuB,SAAS,CACXvB,KAAKsB,EAAK1B,KACVS,KAAMiB,EAAKE,KAAKnB,KAChBD,QAAQkB,EAAKG,IAAIrB,QACjBH,YAAaqB,EAAKI,QAAQ,GAAGzB,YAC7BE,KAAMmB,EAAKI,QAAQ,GAAGvB,KACtBG,KAAMgB,EAAKhB,KAAKqB,MAChBpB,WAAOI,IAEU,QAAbW,EAAKM,KACZ,EAAKL,SAAS,CACZvB,UAAKW,EACLN,UAAMM,EACNP,aAAQO,EACRV,iBAAYU,EACZR,UAAMQ,EACNL,UAAMK,EACNJ,MAAO,8EA1BI,kDA+BjB,EAAKgB,SAAS,CACVvB,UAAMW,EACNN,UAAMM,EACNP,aAASO,EACTV,iBAAYU,EACZR,UAAKQ,EACLL,UAAMK,EACNJ,MAAO,iIAtCM,0D,6GA4Cb,IAAMsB,EAAU,mCAAqCC,KAAKpB,MAAMP,KAAO,OACvE,OACE,yBAAKJ,UAAU,WACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAY,0BAAyB,kBAAC,EAAD,OAC1C,yBAAKA,UAAU,0BACb,kBAAC,EAAD,CAAOL,cAAeoC,KAAKlB,iBAC3B,kBAAC,EAAD,CACAP,KAAMyB,KAAKpB,MAAML,KACjBL,KAAM8B,KAAKpB,MAAMV,KACjBI,QAAS0B,KAAKpB,MAAMN,QACpBH,YAAa6B,KAAKpB,MAAMT,YACxBE,KAAM0B,EACNvB,KAAMwB,KAAKpB,MAAMJ,KACjBC,MAAOuB,KAAKpB,MAAMH,iB,GAvEdwB,IAAMC,W,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,a","file":"static/js/main.a3fc8791.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => ( \r\n<div>\r\n    <h2>Погода</h2>\r\n    <p>Узнайте погоду в вашем городе!</p>\r\n</div>)\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n    <button>Получить погоду</button>\r\n</form>\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"infoWeath\">\r\n    {props.city &&    \r\n    <>\r\n     <p>Описание: {props.description}\r\n        <img  src={props.icon}></img>\r\n        </p>\r\n        <p>Местоположение: {props.city}, {props.country}</p>\r\n        <p>Температура: {props.temp}°С</p>\r\n        <p>Ветер: {props.wind}м/с</p>\r\n       \r\n       </>\r\n    }  \r\n    <p className=\"error\">{props.error }</p>    \r\n    </div>\r\n    );\r\n\r\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/Info\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n\nconst API_KEY=\"94737880558d647a06e637fcc697bf33\";\n\nclass App extends React.Component {\n  state = {\n    city: undefined,\n    temp: undefined,\n    country: undefined,\n    description:undefined,\n    icon:undefined,\n    wind: undefined,\n    error: undefined\n  }\n      \ngettingWeather = async(e) => {\n  \n  e.preventDefault();\n  let city = e.target.elements.city.value;\n  try{\n  const api_url= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`)\n  const data = await api_url.json();\n  \n  if(city){\n    this.setState({\n       city:data.name,  \n       temp: data.main.temp,\n       country:data.sys.country,\n       description: data.weather[0].description,\n       icon: data.weather[0].icon,\n       wind: data.wind.speed,\n       error: undefined\n       });\n  }else if(data.cod === \"400\"){\n    this.setState({\n      city:undefined,  \n      temp: undefined,\n      country:undefined,\n      description:undefined,\n      icon: undefined,\n      wind: undefined,\n      error: \"Введите город\"\n      });\n  }\n}   \n  catch(error){\nthis.setState({\n    city: undefined,\n    temp: undefined,\n    country: undefined,\n    description:undefined,\n    icon:undefined,\n    wind: undefined,\n    error: \"Города нет в базе данных\"});\n}\n\n}\n\nrender(){\n    const iconUrl = \"http://openweathermap.org/img/w/\" + this.state.icon + \".png\";\n    return(\n      <div className=\"wrapper\">\n        <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className = \"col-xs-6 col-sm-5 info\"><Info/></div>\n            <div className=\"col-xs-6 col-sm-7 form\">\n              <Form  weatherMethod={this.gettingWeather}/>\n              <Weather\n              temp={this.state.temp}\n              city={this.state.city}\n              country={this.state.country}\n              description={this.state.description}\n              icon={iconUrl}\n              wind={this.state.wind}\n              error={this.state.error}\n            />\n            </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}